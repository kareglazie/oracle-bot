import pandas as pd
import random
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler, filters
from config import DATA_PATH
from consts import GREETINGS, TOPICS

df = pd.read_csv(DATA_PATH)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    greeting_style = random.choice(list(GREETINGS.keys()))
    greeting = GREETINGS[greeting_style]
    
    keyboard = [
        [InlineKeyboardButton(topic, callback_data=topic)] 
        for topic in TOPICS
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"{greeting}\n\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:",
        reply_markup=reply_markup
    )

async def handle_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "new":
        return await handle_new_request(update, context)
    
    selected_topic = query.data
    
    if selected_topic == '–°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ':
        advice = df.sample(n=1)['advice'].values[0]
    else:
        topic_lower = selected_topic.lower()
        topic_advices = df[df['topic'].str.lower() == topic_lower]
        if not topic_advices.empty:
            advice = topic_advices.sample(n=1)['advice'].values[0]
        else:
            advice = "üîÆ –Ø –Ω–µ –Ω–∞—à–µ–ª –º—É–¥—Ä–æ—Å—Ç–∏ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é."
    
    typing_message = await query.message.reply_text("üåÄ –û—Ä–∞–∫—É–ª —Ä–∞–∑–º—ã—à–ª—è–µ—Ç...")
    await context.bot.send_chat_action(
        chat_id=query.message.chat_id, 
        action='typing'
    )
    await asyncio.sleep(1)
    await context.bot.delete_message(
        chat_id=query.message.chat_id,
        message_id=typing_message.message_id
    )
    
    keyboard = [[InlineKeyboardButton("üîÑ –ù–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", callback_data="new")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìú {selected_topic.upper()}\n\n{advice}",
        reply_markup=reply_markup
    )

async def handle_new_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton(topic, callback_data=topic)] 
        for topic in TOPICS
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:",
        reply_markup=reply_markup
    )

def setup_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_topic))
    