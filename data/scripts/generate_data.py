import random
from tqdm import tqdm
import pandas as pd
from transformers import pipeline, AutoTokenizer

MODEL_NAME = "slowfastai/DeepSeek-V2-Lite-Chat-bnb-4bit"
OUTPUT_CSV = "../data/datasets/deepseek_generated.csv"
NUM_SAMPLES = 500
BASE_TOPICS = [
    "–õ—é–±–æ–≤—å", "–î–µ–Ω—å–≥–∏", "–ó–¥–æ—Ä–æ–≤—å–µ", "–ö–∞—Ä—å–µ—Ä–∞",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–°–µ–º—å—è", "–î—Ä—É–∂–±–∞",
    "–°–ª–æ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", "–î–µ—Ç–∏", "–ï–¥–∞", "–†–∞–±–æ—Ç–∞"
]

def main():
    pipe = pipeline(
        "text-generation",
        model=MODEL_NAME,
        max_new_tokens=50,
        temperature=0.7,
        do_sample=True,
        trust_remote_code=True
    )
    tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME, trust_remote_code=True)
    pipe.tokenizer = tokenizer

    def generate_random_topic() -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É"""
        prompt = [{
            "role": "user",
            "content": """
                –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ—Å—Ç—É—é –∂–∏–∑–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É –∏–∑ –æ–¥–Ω–æ–≥–æ-–¥–≤—É—Ö —Å–ª–æ–≤.
                –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º: –ª—é–±–æ–≤—å, –∂–∏–∑–Ω—å, –∑–¥–æ—Ä–æ–≤—å–µ, –¥–µ–Ω—å–≥–∏, –∫–∞—Ä—å–µ—Ä–∞, —Å–µ–º—å—è.
                –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º—É —Ç–µ–º—É, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.
                –û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
            """
        }]

        output = pipe(prompt, max_new_tokens=10)
        return output[0]['generated_text'][1]['content']

    def generate_advice(topic: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–ª–∏ —Å–æ–≤–µ—Ç –ø–æ —Ç–µ–º–µ"""
        prompt = [{
            "role": "user",
            "content": f"""–¢—ã ‚Äî –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ä–∞–∫—É–ª. –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–ª—É—à—É—Ç–ª–∏–≤—ã–π —Å–æ–≤–µ—Ç
            –∏–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É "{topic}".
            –ü—Ä–∏–º–µ—Ä—ã: "–Æ–º–æ—Ä ‚Äî –∫–∞–∫ –∑–æ–Ω—Ç–∏–∫ –≤ –¥–æ–∂–¥—å. –ù–µ —Å–ø–∞—Å–∞–µ—Ç, –Ω–æ —Å–∫—Ä–∞—à–∏–≤–∞–µ—Ç.",
            "–ü–µ—Å–Ω—è ‚Äî —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.",
            "–ï—Å–ª–∏ –∫–æ—Ç –ª—ë–≥ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Äî –∑–Ω–∞—á–∏—Ç, –ø–æ—Ä–∞ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å.",
            "–ß—ë—Ä–Ω–∞—è –ø–æ–ª–æ—Å–∞ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤–∑–ª—ë—Ç—É."
            –û—Ç–≤–µ—Ç –Ω–∞—á–Ω–∏ —Å üîÆ. –û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
        }]

        output = pipe(prompt)
        return output[0]['generated_text'][1]['content']

    data = []
    for _ in tqdm(range(NUM_SAMPLES)):
        try:
            if random.random() > 0.5:
                topic = random.choice(BASE_TOPICS)
            else:
                topic = generate_random_topic()
            
            advice = generate_advice(topic)
            data.append({"topic": topic, "advice": advice})
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")

    df = pd.DataFrame(data)
    df.to_csv(OUTPUT_CSV, index=False)
    print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_CSV}")

if __name__ == "__main__":
    main()