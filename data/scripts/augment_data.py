import random
import pandas as pd
from tqdm import tqdm
from transformers import pipeline, AutoTokenizer

MODEL_NAME = "slowfastai/DeepSeek-V2-Lite-Chat-bnb-4bit"
INPUT_CSV = "../data/datasets/deepseek_generated.csv"  
OUTPUT_CSV = "../data/datasets/deepseek_augmented.csv"
AUGMENTATION_FACTOR = 3 
SAMPLE_SIZE = 50

def initialize_model():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    pipe = pipeline(
        "text-generation",
        model=MODEL_NAME,
        max_new_tokens=100,
        temperature=0.7,
        do_sample=True,
        trust_remote_code=True
    )
    tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME, trust_remote_code=True)
    pipe.tokenizer = tokenizer
    return pipe

def augment_paraphrase(pipe, original_advice: str) -> str:
    """–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ—Ç —Å–æ–≤–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–º—ã—Å–ª"""
    prompt = [{
        "role": "user",
        "content": f"""
        –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–≤–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ —Å–º—ã—Å–ª –∏ —Å—Ç–∏–ª—å. 
        –°–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–∞–∫–∏–º –∂–µ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –∏ –ø–æ–ª—É—à—É—Ç–ª–∏–≤—ã–º.
        
        –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç: {original_advice}
        
        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.
        –ù–∞—á–Ω–∏ —Å üîÆ. –û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        """
    }]
    
    output = pipe(prompt)
    return output[0]['generated_text'][1]['content']

def augment_alternative_advice(pipe, topic: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ —Ç—É –∂–µ —Ç–µ–º—É"""
    prompt = [{
        "role": "user",
        "content": f"""
        –ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–π —Å–æ–≤–µ—Ç –∏–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É "{topic}".
        –°–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–º –∏ –ø–æ–ª—É—à—É—Ç–ª–∏–≤–æ–º —Å—Ç–∏–ª–µ.
        
        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.
        –ù–∞—á–Ω–∏ —Å üîÆ. –û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        """
    }]
    
    output = pipe(prompt)
    return output[0]['generated_text'][1]['content']

def augment_with_context(pipe, topic: str, advice: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–≤–µ—Ç—É"""
    prompt = [{
        "role": "user",
        "content": f"""
        –¢–µ–º–∞: {topic}
        –ò—Å—Ö–æ–¥–Ω—ã–π —Å–æ–≤–µ—Ç: {advice}
        
        –î–æ–±–∞–≤—å –∫ —ç—Ç–æ–º—É —Å–æ–≤–µ—Ç—É –Ω–µ–±–æ–ª—å—à–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), 
        —Å–æ—Ö—Ä–∞–Ω—è—è –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∏ –ø–æ–ª—É—à—É—Ç–ª–∏–≤—ã–π —Å—Ç–∏–ª—å.
        
        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.
        –ù–∞—á–Ω–∏ —Å üîÆ. –û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        """
    }]
    
    output = pipe(prompt)
    return output[0]['generated_text'][1]['content']

def main():
    pipe = initialize_model()
    
    df = pd.read_csv(INPUT_CSV)
    augmented_data = []

    for _, row in tqdm(df.iterrows(), total=len(df)):
        topic = row['topic']
        advice = row['advice']
        
        augmented_data.append({
            "topic": topic,
            "advice": advice,
            "augmentation_type": "original"
        })
        
        for i in range(AUGMENTATION_FACTOR):
            try:
                method = random.choice(['paraphrase', 'alternative', 'context'])
                
                if method == 'paraphrase':
                    new_advice = augment_paraphrase(pipe, advice)
                    augmented_data.append({
                        "topic": topic,
                        "advice": new_advice,
                        "augmentation_type": "paraphrase"
                    })
                    
                elif method == 'alternative':
                    new_advice = augment_alternative_advice(pipe, topic)
                    augmented_data.append({
                        "topic": topic,
                        "advice": new_advice,
                        "augmentation_type": "alternative"
                    })
                        
                elif method == 'context':
                    new_advice = augment_with_context(pipe, topic, advice)
                    augmented_data.append({
                        "topic": topic,
                        "advice": new_advice,
                        "augmentation_type": "with_context"
                    })
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
                continue

    augmented_df = pd.DataFrame(augmented_data)
    augmented_df.to_csv(OUTPUT_CSV, index=False)
    print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_CSV}")

if __name__ == "__main__":
    main()